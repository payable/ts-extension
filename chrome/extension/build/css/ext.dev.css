/*
	Any rules can be mixins. These ones are technical and won't go to output
	Here must be stored "function mixins". Some complicated and connected mixins.
	- "MERGING!" means that it will be added to existing property of resulting rule, if there' any.
		Example: merging the rule of 'border-width:1px' will result in 
		'border-width:1px, 1px' if there was 'border-width:1px' before. LESS do merge with "+:"
	- use .mixin-name() to prevent outputting such mixins
*/
/* 
	MERGING! .transition Returns prefixed transition rules
	Allows adding new transition rules on different css properties.
	Example:
		.transitionable{
			.transition-add(opacity .1s ease-in-out);
			.transition-add(color .3s ease-in-out);
		}
*/
/* 
	Returns prefixed transition rules. Also prefixes value
	Differs from transtion-add in prefixing transitionable css property
	Example: ("transform" property requieres prefixing)
	.foobar{
		.transition-prefixed-add(transform, .3s ease-in-out);
	}
*/
/* 
	MERGING! .transition-prefixed
*/
/* Returns @property prefixed with all prefixes and a @value as value */
/* MERGING! .prefix */
/* 
*	Returns @property prefixed with all prefixes and a 
*	@value with also prefixed another property.
*	Typical use is willing to get such CSS string:
*	-webkit-transition: -webkit-transform 0.3s ease-in-out;
*	Where both property and value should be prefixed
*/
/* 
*	MERGING! .prefix-prop-prefixed
*/
@-webkit-keyframes ts-ext-btn-rotate {
  100% {
    -webkit-transform: rotate(90deg);
    -moz-transform: rotate(90deg);
    -o-transform: rotate(90deg);
    -ms-transform: rotate(90deg);
    transform: rotate(90deg);
  }
}
.ts-btn-container {
  display: inline-block;
  margin-left: 10px;
  color: #BED4FF;
  cursor: pointer;
  -webkit-transition: color 0.1s ease-in-out;
  -moz-transition: color 0.1s ease-in-out;
  -o-transition: color 0.1s ease-in-out;
  -ms-transition: color 0.1s ease-in-out;
  transition: color 0.1s ease-in-out;
}
.ts-btn-container:hover {
  /*        .prefix(transform-origin, 50% 50%);
        .prefix(animation, ts-ext-btn-rotate .5s ease-in-out 0s 1);*/
  color: #d8e5ff;
}
.ts-btn-container:hover:active {
  color: #fff;
}
/* hides angular not ready cloaked stuff in CSP mode */
[ng\:cloak],
[ng-cloak],
[data-ng-cloak],
[x-ng-cloak],
.ng-cloak,
.x-ng-cloak {
  display: none !important;
}
@-webkit-keyframes flickering {
  0%,
  50%,
  100% {
    opacity: 1;
  }
  80% {
    opacity: 0;
  }
}
/*-----------------------------*/
body.ts-ext-popup {
  width: 300px;
  min-height: 70px;
  outline: 1px solid #aaa;
  font-family: 'cooper_hewittbook';
}
body.ts-ext-popup .ts-popup-content {
  padding: 5px;
  outline: 1px dashed #aaa;
}
body.ts-ext-popup .ts-popup-content .content-line {
  width: 100%;
  outline: 1px solid red;
  overflow: hidden;
  line-height: 40px;
}
body.ts-ext-popup .ts-popup-content .content-line .line-left {
  float: left;
}
body.ts-ext-popup .ts-popup-content .content-line .line-right {
  float: right;
}
body.ts-ext-popup .header {
  height: 20px;
  line-height: 20px;
}
body.ts-ext-popup .header .status {
  float: left;
}
body.ts-ext-popup .header .status .started.green {
  color: #0B9300;
}
body.ts-ext-popup .header .status .started.red {
  color: #BF0B00;
}
body.ts-ext-popup .header .current-time {
  float: right;
  height: 20px;
  padding: 0 9px;
}
body.ts-ext-popup .header .current-time .flickering {
  /* this is only a cosmetical bullshit */
  -webkit-animation: flickering 1.3s linear 0s infinite;
  -moz-animation: flickering 1.3s linear 0s infinite;
  -o-animation: flickering 1.3s linear 0s infinite;
  -ms-animation: flickering 1.3s linear 0s infinite;
  animation: flickering 1.3s linear 0s infinite;
}
body.ts-ext-popup .fancy-font {
  font-family: 'cooper_hewittlight';
}
body.ts-ext-popup .fancy-font-thin {
  font-family: 'cooper_hewittthin';
}
body.ts-ext-popup .fancy-font-bold {
  font-family: 'cooper_hewittbold';
}
body.ts-ext-popup .fancy-font-semibold {
  font-family: 'cooper_hewittsemibold';
}
body.ts-ext-popup .fancy-font-medium {
  font-family: 'cooper_hewittmedium';
}
body.ts-ext-popup .fancy-font-book {
  font-family: 'cooper_hewittbook';
}
body.ts-ext-popup .dblock {
  display: block;
}
body.ts-ext-popup .dnone {
  display: none;
}
body.ts-ext-popup .bold {
  font-family: 'cooper_hewittmedium';
}
body.ts-ext-popup .italic {
  font-style: italic;
}
body.ts-ext-popup .not-important-forever {
  color: #aaa;
}
